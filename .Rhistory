head(cricketdata)
str(cricketdata)
View(cricketdata)
cricketdata <- cricketdata %>%
mutate(cricketdata, as.factor("Date"))
cricketdata$Date <- as.factor(cricketdata$Date)
# Converting 'Date' to factor, from a character
cricketdata$Date <- as.Date(cricketdata$Date)
# Converting 'Country' to factor, from character
cricketdata$Country <- as.factor(cricketdata$Country)
str(cricketdata)
cricketdata %>%
arrange(desc(Runs_Scored)) %>%
head(5)
cricketdata <- cricketdata %>%
arrange(desc(Runs_Scored))
cricketdata <- cricketdata %>%
arrange(desc(Runs_Scored)) %>%
head(5)
cricketdata %>%
arrange(desc(Runs_Scored)) %>%
head(5)
library(tidyverse)
library(ggplot2)
cricketdata %>%
arrange(desc(Runs_Scored)) %>%
head(5)
# Code to create a correlation table using the 'cor' function. Name the variable
# 'correlation_matrix'
cor(cricketdata)
# Code to create a correlation table using the 'cor' function. Name the variable
# 'correlation_matrix'
correlation_matrix <- cor(2,3,6)
# Code to create a correlation table using the 'cor' function. Name the variable
# 'correlation_matrix'
correlation_matrix <- cor(cricketdata[,c("Runs_Scored", "Minutes_Batted", "Balls_Faced")], use = "complete.obs")
View(correlation_matrix)
library(corrplot)
corrplot::corrplot(correlation_matrix)
corrplot::corrplot(correlation_matrix, method = "number")
# Code to create a scatterplot of Runs Scored vs Balls Faced
scatRsBf <- ggplot(cricketdata, x = "Runs_Scored", y = "Balls_Faced") +
geom_point()
scatRsBf <- ggplot(cricketdata, x = "Runs_Scored", y = "Balls_Faced") +
geom_point()
scatRsBf
scatRsBf <- ggplot(cricketdata, aes(x = Runs_Scored, y = Balls_Faced)) +
geom_point()
scatRsBf
scatRsBf <- ggplot(cricketdata, aes(x = Runs_Scored, y = Balls_Faced)) +
geom_point(color = "green")
scatRsBf
scatRsBf <- ggplot(cricketdata, aes(x = Runs_Scored, y = Balls_Faced)) +
geom_point(x = "Runs Scored", y = "Balls Faced", color = "green")
scatRsBf
scatRsBf <- ggplot(cricketdata, aes(x = Runs_Scored, y = Balls_Faced)) +
geom_point(color = "green") +
labs(x = "Runs Scored", y = "Balls Faced") +
ggtitle("Scatter Plot: Runs Scored vs Balls Faced")
scatRsBf
scatRsMb <- ggplot(cricketdata, aes(x = Runs_Scored, y = Minutes_Batted)) +
geom_point(color = "#33CCFF") +
labs(x = "Runs Scored", y = "Minutes Batted") +
ggtitle("Scatter Plot: Runs Scored vs Minutes Batted")
scatRsMb
?corrplot
summary_data <- cricketdata %>%
group_by(Innings.Player) %>%
summarize(
Runs_ScoredTotal = sum(Runs_Scored,na.rm=TRUE),
Minutes_BattedTotal = sum(Minutes_Batted,na.rm=TRUE),
MatchesTotal = sum(Batted_Flag, na.rm=TRUE),
Not_Out_FlagTotal = sum(Not_Out_Flag,na.rm=TRUE),
Balls_FacedTotal = sum(Balls_Faced,na.rm=TRUE),
Boundary_FoursTotal =sum(Boundary_Fours,na.rm=TRUE),
Boundary_SixesTotal =sum(Boundary_Sixes,na.rm=TRUE),
Total_InningsTotal =sum(!is.na(Runs_Scored)),
X501 =sum(X50.s,na.rm=TRUE),
X1001=sum(X100.s,na.rm=TRUE),
Runs_ScoredPerMatch = mean(Runs_Scored,na.rm=TRUE),
Minutes_BattedPerMatch = mean(Minutes_Batted,na.rm=TRUE),
Not_OutPerMatch = mean(Not_Out_Flag,na.rm=TRUE),
Balls_FacedPerMatch = mean(Balls_Faced,na.rm=TRUE),
Boundary_FoursPerMatch=mean(Boundary_Fours,na.rm=TRUE),
Boundary_SixesPerMatch=mean(Boundary_Sixes,na.rm=TRUE),
X50PerMatch=mean(X50.s,na.rm=TRUE),
X100PerMatch=mean(X100.s,na.rm=TRUE),
)
View(summary_data)
filtsummarydata <- filtsummarydata %>%
filter(MatchesTotal > 19) %>%
arrange(desc(Runs_ScoredPerMatch)) %>%
head(5)
filtsummarydata <- summarydata %>%
filter(MatchesTotal > 19) %>%
arrange(desc(Runs_ScoredPerMatch)) %>%
head(5)
filtsummarydata <- summary_data %>%
filter(MatchesTotal > 19) %>%
arrange(desc(Runs_ScoredPerMatch)) %>%
head(5)
filtsummarydata
View(filtsummarydata)
top10Runs_plot <- ggplot(top10Runs, aes(x = reorder(Innings.Player, -Runs_ScoredPerMatch), y = Runs_ScoredPerMatch)) +
geom_bar(stat = "identity", fill = "#00BFC4") +
coord_flip() +
labs(title = "Top 10 Players based on Runs Scored per Match",
x = "Players",
y = "Runs Scored per Match") +
theme_minimal()
top10Runs <- summary_data %>%
filter(MatchesTotal > 19) %>%
arrange(desc(Runs_ScoredPerMatch)) %>%
slice(1:10)
top10Runs_plot <- ggplot(top10Runs, aes(x = reorder(Innings.Player, -Runs_ScoredPerMatch), y = Runs_ScoredPerMatch)) +
geom_bar(stat = "identity", fill = "#00BFC4") +
coord_flip() +
labs(title = "Top 10 Players based on Runs Scored per Match",
x = "Players",
y = "Runs Scored per Match") +
theme_minimal()
top10Runs_plot
top10Runs_plot <- ggplot(top10Runs, aes(x = reorder(Innings.Player, -Runs_ScoredPerMatch), y = Runs_ScoredPerMatch)) +
geom_bar(stat = "identity", fill = "#00BFC4") +
coord_flip() +
labs(title = "Top 10 Players based on Runs Scored per Match",
x = "Players",
y = "Runs Scored per Match") +
theme_minimal()
top10Runs_plot
top10Runs_plot <- ggplot(top10Runs, aes(x = reorder(Innings.Player, -Runs_ScoredPerMatch), y = Runs_ScoredPerMatch)) +
geom_bar(stat = "identity", fill = "#00BFC4") +
labs(title = "Top 10 Players based on Runs Scored per Match",
x = "Players",
y = "Runs Scored per Match") +
theme_minimal()
top10Runs_plot
top10Runs_plot <- ggplot(top10Runs, aes(x = reorder(Innings.Player, -Runs_ScoredPerMatch), y = Runs_ScoredPerMatch)) +
geom_bar(stat = "identity", fill = "#00BFC4") +
geom_col(show.legend = FALSE) +
ggtitle("Top 10 Runs")
labs(title = "Top 10 Runs by Player",
x = "Players",
y = "Runs Scored per Match") +
theme_minimal()
top10Runs_plot
top10Runs_plot <- ggplot(top10Runs, aes(x = reorder(Innings.Player, -Runs_ScoredPerMatch), y = Runs_ScoredPerMatch)) +
geom_bar(stat = "identity", fill = "#00BFC4") +
geom_col(show.legend = FALSE) +
ggtitle("Top 10 Runs")
labs(title = "Top 10 Runs by Player",
x = "Players",
y = "Runs Scored per Match") +
theme_minimal()
top10Runs_plot
top10Runs_plot <- ggplot(top10Runs, aes(x = reorder(Innings.Player, -Runs_ScoredPerMatch), y = Runs_ScoredPerMatch)) +
geom_bar(stat = "identity", fill = "#00BFC4") +
ggtitle("Top 10 Runs")
labs(x = "Players",
y = "Runs Scored per Match") +
theme_minimal()
top10Runs_plot
top10Runs_plot <- ggplot(top10Runs, aes(x = reorder(Innings.Player, -Runs_ScoredPerMatch), y = Runs_ScoredPerMatch)) +
geom_bar(stat = "identity", fill = "#00BFC4") +
ggtitle("Top 10 Runs") +
labs(x = "Players",
y = "Runs Scored per Match") +
theme_minimal()
top10Runs_plot
top10Runs_plot <- ggplot(top10Runs, aes(x = reorder(Innings.Player, -Runs_ScoredPerMatch), y = Runs_ScoredPerMatch)) +
geom_bar(stat = "identity", fill = "#00BFC4") +
ggtitle("Top 10 Runs") +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
labs(x = "Players",
y = "Runs Scored per Match") +
theme_minimal()
top10Runs_plot
top10Runs_plot <- ggplot(top10Runs, aes(x = reorder(Innings.Player, -Runs_ScoredPerMatch), y = Runs_ScoredPerMatch)) +
geom_bar(stat = "identity", fill = "#00BFC4") +
ggtitle("Top 10 Runs") +
geom_text(aes(label = round(Runs_ScoredPerMatch,1), vjust = -0.1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
labs(x = "Players",
y = "Runs Scored per Match") +
theme_minimal()
top10Runs_plot
top10Runs_plot <- ggplot(top10Runs, aes(x = reorder(Innings.Player, -Runs_ScoredPerMatch), y = Runs_ScoredPerMatch)) +
geom_bar(stat = "identity", fill = "#00BFC4") +
ggtitle("Top 10 Runs") +
geom_text(aes(label = round(Runs_ScoredPerMatch,1), vjust = -0.1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1),
plot.title =  element_text(hjust = 0.5, colour = "Black", size = 20)) +
labs(x = "Players",
y = "Runs Scored per Match") +
theme_minimal()
top10Runs_plot
top10Runsplot <- ggplot(top10Runs, aes(x = reorder(Innings.Player, -Runs_ScoredPerMatch), y = Runs_ScoredPerMatch)) +
geom_bar(stat = "identity", fill = "#00BFC4") +
ggtitle("Top 10 Runs") +
geom_text(aes(label = round(Runs_ScoredPerMatch,1), vjust = -0.1)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1),
plot.title =  element_text(hjust = 0.5, colour = "Black", size = 20)) +
labs(x = "Players",
y = "Runs Scored per Match") +
theme_minimal()
top10Runsplot
top10playernames <- top10Runs$Innings.Player
top10playerdata <- cricketdata %>%
filter(Innings.Player %in% top10playernames
View(top10Runsplot)
View(top10Runsplot)
BPT10 <- ggplot(top10playerdata, aes(x = Innings.Player, y = Runs_Scored)) +
geom_boxplot(aes(fill = Innings.Player)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
ggtitle("Score Distribution of Top 10 Players - Boxplot") +
labs(x = "Players", y = "Runs Scored")
top10playernames <- top10Runs$Innings.Player
top10playerdata <- cricketdata %>%
filter(Innings.Player %in% top10playernames)
BPT10 <- ggplot(top10playerdata, aes(x = Innings.Player, y = Runs_Scored)) +
geom_boxplot(aes(fill = Innings.Player)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
ggtitle("Score Distribution of Top 10 Players - Boxplot") +
labs(x = "Players", y = "Runs Scored")
print(BPT10)
HPT10 <- ggplot(top10playerdata, aes(x = Runs_Scored)) +
geom_histogram(aes(fill = Innings.Player), bins = 30, alpha = 0.5) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
ggtitle("Score Distribution of Top 10 Players - Histogram") +
labs(x = "Runs Scored", y = "Frequency")
print(HPT10)
BPT10 <- ggplot(top10playerdata, aes(x = Innings.Player, y = Runs_Scored)) +
geom_boxplot(alpha = 0.5, outlier.shape = NA, aes(fill = Innings.Player)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
ggtitle("Score Distribution of Top 10 Players - Boxplot") +
labs(x = "Players", y = "Runs Scored")
print(BPT10)
BPT10 <- ggplot(top10playerdata, aes(x = Innings.Player, y = Runs_Scored)) +
geom_boxplot(alpha = 0.5, outlier.shape = NA, aes(fill = Innings.Player)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_jitter(width = 0.3, colour = "") +
ggtitle("Score Distribution of Top 10 Players - Boxplot") +
labs(x = "Players", y = "Runs Scored")
print(BPT10)
BPT10 <- ggplot(top10playerdata, aes(x = Innings.Player, y = Runs_Scored)) +
geom_boxplot(alpha = 0.5, outlier.shape = NA, aes(fill = Innings.Player)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_jitter(width = 0.3, colour = "green") +
ggtitle("Score Distribution of Top 10 Players - Boxplot") +
labs(x = "Players", y = "Runs Scored")
print(BPT10)
BPT10 <- ggplot(top10playerdata, aes(x = Innings.Player, y = Runs_Scored)) +
geom_boxplot(alpha = 0.5, outlier.shape = NA, aes(fill = Innings.Player)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_jitter(width = 0.3, colour = Innings.Player) +
ggtitle("Score Distribution of Top 10 Players - Boxplot") +
labs(x = "Players", y = "Runs Scored")
BPT10 <- ggplot(top10playerdata, aes(x = Innings.Player, y = Runs_Scored)) +
geom_boxplot(alpha = 0.5, outlier.shape = NA, aes(fill = Innings.Player)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_jitter(width = 0.3, color = Innings.Player) +
ggtitle("Score Distribution of Top 10 Players - Boxplot") +
labs(x = "Players", y = "Runs Scored")
BPT10 <- ggplot(top10playerdata, aes(x =fct_reorder(Innings.Player, Runs_Scored, .desc=TRUE), y = Runs_Scored)) +
geom_boxplot(alpha = 0.5, aes(fill = Innings.Player)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_jitter(width = 0.3, aes(color = Innings.Player)) +
ggtitle("Score Distribution of Top 10 Players - Boxplot") +
labs(x = "", y = "Runs Scored")
print(BPT10)
BPT10 <- ggplot(top10playerdata, aes(x =fct_reorder(Innings.Player, Runs_Scored, .desc=TRUE), y = Runs_Scored)) +
geom_boxplot(alpha = 0.5, outlier.colour = NA, aes(fill = Innings.Player)) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
geom_jitter(width = 0.3, aes(color = Innings.Player)) +
ggtitle("Score Distribution of Top 10 Players - Boxplot") +
labs(x = "", y = "Runs Scored")
print(BPT10)
HPT10 <- ggplot(top10playerdata, aes(x = Runs_Scored)) +
geom_histogram(aes(fill = Innings.Player), bins = 30, alpha = 0.5) +
theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
ggtitle("Score Distribution of Top 10 Players - Histogram") +
labs(x = "Runs Scored", y = "Frequency")
print(HPT10)
HPT10 <- ggplot(top10playerdata, aes(x = Runs_Scored)) +
geom_histogram() +
ggtitle("Score Distribution of Top 10 Players - Histogram") +
facet_wrap(~Innings.Player)
print(HPT10)
hist_scores <- ggplot(top10_players_data, aes(x = Runs_Scored)) +
geom_histogram(binwidth = 10, fill = "#00BFC4") +
facet_wrap(~Innings.Player) +
labs(x = "Runs Scored per Match",
y = "Frequency") +
theme_minimal()
hist_scores <- ggplot(top10playersdata, aes(x = Runs_Scored)) +
geom_histogram(binwidth = 10, fill = "#00BFC4") +
facet_wrap(~Innings.Player) +
labs(x = "Runs Scored per Match",
y = "Frequency") +
theme_minimal()
hist_scores <- ggplot(top10playerdata, aes(x = Runs_Scored)) +
geom_histogram(binwidth = 10, fill = "#00BFC4") +
facet_wrap(~Innings.Player) +
labs(x = "Runs Scored per Match",
y = "Frequency") +
theme_minimal()
hist_scores
hist_scores <- ggplot(top10playerdata, aes(x = Runs_Scored)) +
geom_histogram(binwidth = 10, fill = "#00BFC4") +
facet_wrap(~Innings.Player) +
labs(x = "Runs Scored",
y = "Frequency") +
theme_minimal()
hist_scores
cricketdata <- cricketdata %>%
mutate(BattingStrikeRate = ifelse(is.finite(Runs_Scored / Balls_Faced), (Runs_Scored / Balls_Faced) * 100, NA),
PercBoundaries = ifelse(is.finite(((Boundary_Fours * 4) + (Boundary_Sixes * 6)) / Runs_Scored), (((Boundary_Fours * 4) + (Boundary_Sixes * 6)) / Runs_Scored) * 100, NA)
)
summary_data <- summary_data %>%
mutate(
BattingStrikeRate = ifelse(is.finite(Runs_ScoredTotal / Balls_FacedTotal), (Runs_ScoredTotal / Balls_FacedTotal) * 100, NA),
BattingAverage = ifelse(is.finite(Runs_ScoredTotal / (Total_InningsTotal - Not_Out_FlagTotal)), (Runs_ScoredTotal / (Total_InningsTotal - Not_Out_FlagTotal)), NA),
NotOutRate = ifelse(is.finite(Not_Out_FlagTotal / Total_InningsTotal), (Not_Out_FlagTotal / Total_InningsTotal) * 100, NA),
PercBoundaries = ifelse(is.finite(((Boundary_FoursTotal * 4) + (Boundary_SixesTotal * 6)) / Runs_ScoredTotal), (((Boundary_FoursTotal * 4) + (Boundary_SixesTotal * 6)) / Runs_ScoredTotal) * 100, NA)
)
View(summary_data)
top10StrikeRate <- summary_data %>%
filter(MatchesTotal>19)%>%
arrange(desc(BattingStrikeRate)) %>%
slice(1:10)
top10BattingAverage<- summary_data %>%
filter(MatchesTotal>19)%>%
arrange(desc(BattingAverage)) %>%
slice(1:10)
top10NotOutRate<- summary_data %>%
filter(MatchesTotal>19)%>%
arrange(desc(NotOutRate)) %>%
slice(1:10)
top10PercBoundaries<- summary_data %>%
filter(MatchesTotal>19)%>%
arrange(desc(PercBoundaries)) %>%
slice(1:10)
print(top10StrikeRate)
View(top10StrikeRate)
print(top10StrikeRate)
print(top10BattingAverage)
print(top10NotOutRate)
print(top10PercBoundaries)
print(top10NotOutRate)
print(top10PercBoundaries)
print(top10BattingAverage)
View(top10BattingAverage)
View(top10NotOutRate)
View(top10PercBoundaries)
View(top10StrikeRate)
columns_to_normalize <- c("BattingStrikeRate", "BattingAverage", "NotOutRate", "PercBoundaries")
show(environment())
filtsummarydata <- summary_data %>%
filter(MatchesTotal>19)
max_values <- apply(filtsummarydata[,columns_to_normalize], 2, max,na.rm=TRUE)
normalized_columns <- sweep(filtsummarydata[, columns_to_normalize], 2, max_values, "/")
colnames(normalized_columns) <- paste('Norm', colnames(normalized_columns), sep = '_')
filtsummarydata <- cbind(summary_data_filtered, normalized_columns)
filtsummarydata <- cbind(filtsummarydata, normalized_columns)
top5StrikeRate <- filtsummarydata %>%
arrange(desc(BattingStrikeRate)) %>%
slice(1:5)
radar_data <- top5StrikeRate[,c("Norm_BattingStrikeRate", "Norm_BattingAverage", "Norm_NotOutRate", "Norm_PercBoundaries", "Innings.Player")]
radar_data <- data.frame(BattingStrikeRate = c(1, 0, radar_data$Norm_BattingStrikeRate),
BattingAverage = c(1, 0, radar_data$Norm_BattingAverage),
NotOutRate = c(1, 0, radar_data$Norm_NotOutRate),
PercBoundaries = c(1, 0, radar_data$Norm_PercBoundaries),
row.names=c("max","min",radar_data$Innings.Player))
radar_plot <- radarchart(radar_data)
library(fmsb)
# Create the radar chart
radar_plot <- radarchart(radar_data)
radar_data <- data.frame(BattingStrikeRate = c(1, 0, radar_data$Norm_BattingStrikeRate),
BattingAverage = c(1, 0, radar_data$Norm_BattingAverage),
NotOutRate = c(1, 0, radar_data$Norm_NotOutRate),
PercBoundaries = c(1, 0, radar_data$Norm_PercBoundaries),
row.names=c("max","min",radar_data$Innings.Player))
# Create the radar chart
radar_plot <- radarchart(radar_data)
columns_to_normalize <- c("BattingStrikeRate", "BattingAverage", "NotOutRate", "PercBoundaries")
# Compute the maximum values for the specified columns. To noramlise to 1 we will need to know the max value present for each variable in the full dataset, this will be listed in a vector called max_values.
filtsummarydata <- summary_data %>%
filter(MatchesTotal>19)
max_values <- apply(filtsummarydata[,columns_to_normalize], 2, max,na.rm=TRUE)
# Normalize the specified columns (column values / max_values)
normalized_columns <- sweep(filtsummarydata[, columns_to_normalize], 2, max_values, "/")
colnames(normalized_columns) <- paste('Norm', colnames(normalized_columns), sep = '_')
# Add the normalized columns back to the filtered data frame
filtsummarydata <- cbind(filtsummarydata, normalized_columns)
# Filter for specific athletes (here we filter for top 5 batting strike rate)
top5StrikeRate <- filtsummarydata %>%
arrange(desc(BattingStrikeRate)) %>%
slice(1:5)
# Select the data for the radar chart
radar_data <- top5StrikeRate[,c("Norm_BattingStrikeRate", "Norm_BattingAverage", "Norm_NotOutRate", "Norm_PercBoundaries", "Innings.Player")]
radar_data <- data.frame(BattingStrikeRate = c(1, 0, radar_data$Norm_BattingStrikeRate),
BattingAverage = c(1, 0, radar_data$Norm_BattingAverage),
NotOutRate = c(1, 0, radar_data$Norm_NotOutRate),
PercBoundaries = c(1, 0, radar_data$Norm_PercBoundaries),
row.names=c("max","min",radar_data$Innings.Player))
# Create the radar chart
radar_plot <- radarchart(radar_data)
columns_to_normalize <- c("BattingStrikeRate", "BattingAverage", "NotOutRate", "PercBoundaries")
# Compute the maximum values for the specified columns. To noramlise to 1 we will need to know the max value present for each variable in the full dataset, this will be listed in a vector called max_values.
filtsummarydata <- summary_data %>%
filter(MatchesTotal>19)
max_values <- apply(filtsummarydata[,columns_to_normalize], 2, max,na.rm=TRUE)
# Normalize the specified columns (column values / max_values)
normalized_columns <- sweep(filtsummarydata[, columns_to_normalize], 2, max_values, "/")
colnames(normalized_columns) <- paste('Norm', colnames(normalized_columns), sep = '_')
# Add the normalized columns back to the filtered data frame
filtsummarydata <- cbind(filtsummarydata, normalized_columns)
# Filter for specific athletes (here we filter for top 5 batting strike rate)
top5StrikeRate <- filtsummarydata %>%
arrange(desc(BattingStrikeRate)) %>%
slice(1:5)
# Select the data for the radar chart
radar_data <- top5StrikeRate[,c("Norm_BattingStrikeRate", "Norm_BattingAverage", "Norm_NotOutRate", "Norm_PercBoundaries", "Innings.Player")]
radar_data <- data.frame(BattingStrikeRate = c(1, 0, radar_data$Norm_BattingStrikeRate),
BattingAverage = c(1, 0, radar_data$Norm_BattingAverage),
NotOutRate = c(1, 0, radar_data$Norm_NotOutRate),
PercBoundaries = c(1, 0, radar_data$Norm_PercBoundaries),
row.names=c("max","min",radar_data$Innings.Player),
colors <- c("red", "green", "blue", "yellow", "purple"),
legend("bottom", legend = rownames(radar_data)[-c(1,2)], pch = 20, col = colors, cex = 1, bty = "n"))
radar_data <- top5StrikeRate[,c("Norm_BattingStrikeRate", "Norm_BattingAverage", "Norm_NotOutRate", "Norm_PercBoundaries", "Innings.Player")]
radar_data <- data.frame(BattingStrikeRate = c(1, 0, radar_data$Norm_BattingStrikeRate),
BattingAverage = c(1, 0, radar_data$Norm_BattingAverage),
NotOutRate = c(1, 0, radar_data$Norm_NotOutRate),
PercBoundaries = c(1, 0, radar_data$Norm_PercBoundaries),
row.names=c("max","min",radar_data$Innings.Player),
colors <- c("red", "green", "blue", "yellow", "purple"))
radar_data <- top5StrikeRate[,c("Norm_BattingStrikeRate", "Norm_BattingAverage", "Norm_NotOutRate", "Norm_PercBoundaries", "Innings.Player")]
radar_data <- data.frame(BattingStrikeRate = c(1, 0, radar_data$Norm_BattingStrikeRate),
BattingAverage = c(1, 0, radar_data$Norm_BattingAverage),
NotOutRate = c(1, 0, radar_data$Norm_NotOutRate),
PercBoundaries = c(1, 0, radar_data$Norm_PercBoundaries),
row.names=c("max","min",radar_data$Innings.Player),
colors <- c("red", "green", "blue", "yellow", "purple"))
radar_data <- top5StrikeRate[,c("Norm_BattingStrikeRate", "Norm_BattingAverage", "Norm_NotOutRate", "Norm_PercBoundaries", "Innings.Player")]
radar_data <- data.frame(BattingStrikeRate = c(1, 0, radar_data$Norm_BattingStrikeRate),
BattingAverage = c(1, 0, radar_data$Norm_BattingAverage),
NotOutRate = c(1, 0, radar_data$Norm_NotOutRate),
PercBoundaries = c(1, 0, radar_data$Norm_PercBoundaries),
row.names=c("max","min",radar_data$Innings.Player),
# Create the radar chart
radar_plot <- radarchart(radar_data)
source("~/Desktop/MASTERS DEGREE/Course Material/B1701/Week 7/Lecture/B1701Week7/B1701RecruitmentAnalyticsinR.R", echo=TRUE)
rm(list = 'ls')
rm(list = ls())
source("~/Desktop/MASTERS DEGREE/Course Material/B1701/Week 7/Lecture/B1701Week7/B1701RecruitmentAnalyticsinR.R", echo=TRUE)
radar_data <- top5StrikeRate[,c("Norm_BattingStrikeRate", "Norm_BattingAverage", "Norm_NotOutRate", "Norm_PercBoundaries", "Innings.Player")]
radar_data <- data.frame(BattingStrikeRate = c(1, 0, radar_data$Norm_BattingStrikeRate),
BattingAverage = c(1, 0, radar_data$Norm_BattingAverage),
NotOutRate = c(1, 0, radar_data$Norm_NotOutRate),
PercBoundaries = c(1, 0, radar_data$Norm_PercBoundaries),
row.names=c("max","min",radar_data$Innings.Player))
legend("topleft", legend=row.names(radar_data), col=rainbow(length(row.names(radar_data))), lwd=3, cex=0.8, title="Players", text.font=4, bg='lightblue')
View(radar_data)
radar_data <- top5StrikeRate[,c("Norm_BattingStrikeRate", "Norm_BattingAverage", "Norm_NotOutRate", "Norm_PercBoundaries", "Innings.Player")]
radar_data <- data.frame(BattingStrikeRate = c(1, 0, radar_data$Norm_BattingStrikeRate),
BattingAverage = c(1, 0, radar_data$Norm_BattingAverage),
NotOutRate = c(1, 0, radar_data$Norm_NotOutRate),
PercBoundaries = c(1, 0, radar_data$Norm_PercBoundaries),
row.names=c("max","min",radar_data$Innings.Player))
legend("topleft", legend=row.name(radar_data, 3:7), col=rainbow(length(row.names(radar_data))), lwd=3, cex=0.8, title="Players", text.font=4, bg='lightblue')
radar_data <- top5StrikeRate[,c("Norm_BattingStrikeRate", "Norm_BattingAverage", "Norm_NotOutRate", "Norm_PercBoundaries", "Innings.Player")]
radar_data <- data.frame(BattingStrikeRate = c(1, 0, radar_data$Norm_BattingStrikeRate),
BattingAverage = c(1, 0, radar_data$Norm_BattingAverage),
NotOutRate = c(1, 0, radar_data$Norm_NotOutRate),
PercBoundaries = c(1, 0, radar_data$Norm_PercBoundaries),
row.names=c("max","min",radar_data$Innings.Player))
legend("topleft", legend=row.name(radar_data), col=rainbow(length(row.names(radar_data))), lwd=3, cex=0.8, title="Players", text.font=4, bg='lightblue')
radar_data <- top5StrikeRate[,c("Norm_BattingStrikeRate", "Norm_BattingAverage", "Norm_NotOutRate", "Norm_PercBoundaries", "Innings.Player")]
radar_data <- data.frame(BattingStrikeRate = c(1, 0, radar_data$Norm_BattingStrikeRate),
BattingAverage = c(1, 0, radar_data$Norm_BattingAverage),
NotOutRate = c(1, 0, radar_data$Norm_NotOutRate),
PercBoundaries = c(1, 0, radar_data$Norm_PercBoundaries),
row.names=c("max","min",radar_data$Innings.Player))
legend("topleft", legend=row.names(radar_data), col=rainbow(length(row.names(radar_data))), lwd=3, cex=0.8, title="Players", text.font=4, bg='lightblue')
radar_data <- top5StrikeRate[,c("Norm_BattingStrikeRate", "Norm_BattingAverage", "Norm_NotOutRate", "Norm_PercBoundaries", "Innings.Player")]
radar_data <- data.frame(BattingStrikeRate = c(1, 0, radar_data$Norm_BattingStrikeRate),
BattingAverage = c(1, 0, radar_data$Norm_BattingAverage),
NotOutRate = c(1, 0, radar_data$Norm_NotOutRate),
PercBoundaries = c(1, 0, radar_data$Norm_PercBoundaries),
row.names=c("max","min",radar_data$Innings.Player))
legend("topleft", legend=row.names(radar_data, 3:7), col=rainbow(length(row.names(radar_data))), lwd=3, cex=0.8, title="Players", text.font=4, bg='lightblue')
radar_data <- top5StrikeRate[,c("Norm_BattingStrikeRate", "Norm_BattingAverage", "Norm_NotOutRate", "Norm_PercBoundaries", "Innings.Player")]
radar_data <- data.frame(BattingStrikeRate = c(1, 0, radar_data$Norm_BattingStrikeRate),
BattingAverage = c(1, 0, radar_data$Norm_BattingAverage),
NotOutRate = c(1, 0, radar_data$Norm_NotOutRate),
PercBoundaries = c(1, 0, radar_data$Norm_PercBoundaries),
row.names=c("max","min",radar_data$Innings.Player))
legend("topleft", legend=row.names(c(3:7)), col=rainbow(length(row.names(radar_data))), lwd=3, cex=0.8, title="Players", text.font=4, bg='lightblue')
radar_data <- top5StrikeRate[,c("Norm_BattingStrikeRate", "Norm_BattingAverage", "Norm_NotOutRate", "Norm_PercBoundaries", "Innings.Player")]
radar_data <- data.frame(BattingStrikeRate = c(1, 0, radar_data$Norm_BattingStrikeRate),
BattingAverage = c(1, 0, radar_data$Norm_BattingAverage),
NotOutRate = c(1, 0, radar_data$Norm_NotOutRate),
PercBoundaries = c(1, 0, radar_data$Norm_PercBoundaries),
row.names=c("max","min",radar_data$Innings.Player))
# Create the radar chart
radar_plot <- radarchart(radar_data)
LoIWing <- read.csv("/Users/seanmccrone/Desktop/MASTERS DEGREE/Course Material/B1701/Week 7/Guest Speaker - Declan McKean Data/LoIWingers")
LoIWing <- read.csv("/Users/seanmccrone/Desktop/MASTERS DEGREE/Course Material/B1701/Week 7/Guest Speaker - Declan McKean Data/LoIWingers.csv")
LoIWing <- read.csv("/Users/seanmccrone/Desktop/MASTERS DEGREE/Course Material/B1701/Week 7/ClassPractical/LoIWingers.csv")
rm(list = ls())
LoIWing <- read.csv("/Users/seanmccrone/Desktop/MASTERS DEGREE/Course Material/B1701/Week 7/ClassPractical/LoIWingers.csv")
